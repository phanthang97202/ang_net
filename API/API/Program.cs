using API.SignalR;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Serilog;
using System.Text;
using StackExchange.Redis;
using TCommonUtils = CommonUtils.CommonUtils.CommonUtils;
using API.Application.Interfaces.Repositories;
using API.API.MIddlewares;
using API.Infrastructure.Data;
using API.Infrastructure.Data.Repositories;
using API.Application.Interfaces.Persistences;
using API.Infrastructure.Data.Services;
using API.Infrastructure.Data.UnitOfWork;
using API.Shared.Utilities;
using API.Application.Interfaces.Services;
using API.API.Models;
using API.API.Middlewares;
using Microsoft.AspNetCore.RateLimiting;
using Microsoft.AspNetCore.Http.Timeouts;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using DocumentFormat.OpenXml.Spreadsheet;
using System;

// Ch·ªó n√†y n√≥ t·ª± ƒë·ªông load appsettings.json v√† appsettings.{Environment}.json
var builder = WebApplication.CreateBuilder(args);
var loggerFactory = LoggerFactory.Create(builder =>
{
    builder.AddConsole();

    if (OperatingSystem.IsWindows())
    {
        builder.AddEventLog(); // Ch·ªâ th√™m EventLog n·∫øu l√† Windows
    }
});
var logger = loggerFactory.CreateLogger<Program>();

// =====================================
builder.Configuration
    .SetBasePath(Directory.GetCurrentDirectory())
    .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true) // üëà Cho ph√©p thi·∫øu
    .AddJsonFile($"appsettings.{builder.Environment.EnvironmentName}.json", optional: true)
    .AddEnvironmentVariables();


//builder.Services.AddDbContext<AppDbContext>(options =>
//    options.UseSqlite(builder.Configuration.GetConnectionString("SQLiteConnection")));

var JWTSetting = builder.Configuration.GetSection("JWTSetting");
var redisCloudEnv = builder.Configuration.GetSection("RedisCloud");
var database = builder.Configuration.GetSection("ConnectionStrings");
var clientConfig = builder.Configuration.GetSection("ClientConfig");
string RedisUrl = redisCloudEnv.GetSection("RedisUrl").Value;
int RedisPort = TCommonUtils.ConvertToInt(redisCloudEnv.GetSection("RedisPort").Value);
string RedisUser = (redisCloudEnv.GetSection("RedisUser").Value);
string RedisPassword = (redisCloudEnv.GetSection("RedisPassword").Value);
var AspIdentity = builder.Configuration.GetSection("AspIdentity");

// Add services to the container.
//AddTransient: T·∫°o m·ªõi m·ªói khi ƒë∆∞·ª£c y√™u c·∫ßu.
//AddScoped: T·∫°o m·ªôt instance cho m·ªói HTTP request.
//AddSingleton: T·∫°o m·ªôt instance duy nh·∫•t cho to√†n b·ªô ·ª©ng d·ª•ng.
builder.Services.AddScoped<IChatRepository, ChatRespository>();
builder.Services.AddScoped<INewsRespository, NewsRespository>();
builder.Services.AddScoped<IAccountRespository, AccountRespository>();
builder.Services.AddScoped<IHashTagNewsRespository, HashTagNewsRespository>();

// ============ Unit Of Work Pattern ============ 
//          +------------------------+
//          | Controller |  ‚¨ÖÔ∏è Inject Service
//          +------------------------+
//          			‚¨á
//          +------------------------+
//          |      Service Layer     |  ‚¨ÖÔ∏è Inject IUnitOfWork
//          +------------------------+
//          			‚¨á
//          +------------------------+
//          |    UnitOfWork Layer    |  ‚¨ÖÔ∏è Inject Repositories
//          | - NewsRepository       |
//          | - CategoryNewsRepo     |
//          | - SaveChangesAsync()   |
//          | - Dispose()           |
//          +------------------------+
//          			‚¨á
//          +------------------------+
//          |   Repository Layer     |  ‚¨ÖÔ∏è Inject AppDbContext
//          | - Ch·ªâ thao t√°c DB      |
//          | - Kh√¥ng g·ªçi SaveChanges|
//          +------------------------+
//          			‚¨á
//          +------------------------+
//          |       Database         |
//          +------------------------+
// d√πng AddScoped ƒë·ªÉ: 
//      ƒê·∫£m b·∫£o DbContext d√πng chung trong 1 request,
//      Tr√°nh xung ƒë·ªôt d·ªØ li·ªáu n·∫øu c√≥ nhi·ªÅu thao t√°c db trong c√πng 1 request,
//      Qu·∫£n l√Ω transaction d·ªÖ d√†ng khi g·ªçi SaveChangesAsync() trong 1 l·∫ßn duy nh·∫•t,
//      Hi·ªáu su·∫•t t·ªët
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();

builder.Services.AddScoped<INewsCategoryRespository, NewsCategoryRespository>();
builder.Services.AddScoped<INewsCategoryService, NewsCategoryService>();

builder.Services.AddScoped<IMstProvinceRespository, MstProvinceRespository>();
builder.Services.AddScoped<IMstProvinceService, MstProvinceService>();

builder.Services.AddScoped<IMstStadiumStatusRespository, MstStadiumStatusRespository>();
builder.Services.AddScoped<IMstStadiumStatusService, MstStadiumStatusService>();

builder.Services.AddScoped<IMstStadiumTypeRespository, MstStadiumTypeRespository>();
builder.Services.AddScoped<IMstStadiumTypeService, MstStadiumTypeService>();

builder.Services.AddScoped<IMstStadiumRespository, MstStadiumRespository>();
builder.Services.AddScoped<MstStadiumService>();

builder.Services.AddScoped<IMstDistrictRespository, MstDistrictRespository>();
builder.Services.AddScoped<IMstDistrictService, MstDistrictService>();

// inject AppDbContext
// builder.Services.AddDbContext<AppDbContext>(options => options.UseSqlite(database["LocalDb"]));
//builder.Services.AddDbContext<AppDbContext>(options => options.UseNpgsql(database["PostgresqlDb"]));
builder.Services.AddDbContext<AppDbContext>(options =>
{
    options.UseNpgsql(builder.Configuration.GetConnectionString("PostgresqlDb"), sqlOptions => sqlOptions.EnableRetryOnFailure());
    //options.EnableSensitiveDataLogging(); // Ch·ªâ n√™n b·∫≠t trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
    //options.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
});

// inject Redis 
ConfigurationOptions configRedis = new ConfigurationOptions
{
    EndPoints = { { RedisUrl, RedisPort } },
    User = RedisUser,
    Password = RedisPassword
};
ConnectionMultiplexer connectRedis = ConnectionMultiplexer.Connect(configRedis);
builder.Services.AddSingleton<IConnectionMultiplexer>(sp => connectRedis); // t√πy ch·ªânh logic b√™n trong b·∫±ng lamda

// log service 
builder.Services.AddSingleton(typeof(WriteLog));  

// Identity ASP NET CORE
builder.Services.Configure<IdentityOptions>(options =>
{
    // S·ªë l·∫ßn nh·∫≠p sai t·ªëi ƒëa tr∆∞·ªõc khi kh√≥a
    options.Lockout.MaxFailedAccessAttempts = Convert.ToInt32(AspIdentity["MaxFailedAccessAttempts"]);

    // Th·ªùi gian kh√≥a m·∫∑c ƒë·ªãnh (ph√∫t)
    options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(Convert.ToInt32(AspIdentity["LockoutTimeSpan"]));

    // √Åp d·ª•ng kh√≥a cho user m·ªõi
    options.Lockout.AllowedForNewUsers = true;
});

builder.Services.AddIdentity<AppUser, IdentityRole>()
                .AddEntityFrameworkStores<AppDbContext>()
                .AddDefaultTokenProviders();

// config jwt 
builder.Services
       .AddAuthentication(opt =>
        {
            opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            opt.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
        })
       .AddJwtBearer(opt =>
        {
            opt.SaveToken = true; // Thi·∫øt l·∫≠p ƒë·ªÉ l∆∞u l·∫°i token sau khi x√°c th·ª±c th√†nh c√¥ng. ƒêi·ªÅu n√†y h·ªØu √≠ch khi b·∫°n c·∫ßn truy c·∫≠p token trong su·ªët v√≤ng ƒë·ªùi c·ªßa y√™u c·∫ßu HTTP.
            opt.RequireHttpsMetadata = false; // ƒê·∫∑t gi√° tr·ªã n√†y th√†nh false ƒë·ªÉ ·ª©ng d·ª•ng kh√¥ng y√™u c·∫ßu s·ª≠ d·ª•ng HTTPS trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn (kh√¥ng n√™n s·ª≠ d·ª•ng trong s·∫£n xu·∫•t v√¨ thi·∫øu an to√†n). Khi true, ·ª©ng d·ª•ng s·∫Ω y√™u c·∫ßu HTTPS.
            opt.TokenValidationParameters = new TokenValidationParameters // ƒê√¢y l√† n∆°i thi·∫øt l·∫≠p c√°c tham s·ªë ƒë·ªÉ x√°c th·ª±c v√† h·ª£p l·ªá h√≥a token JWT.
            {
                ValidateIssuer = true, //  X√°c th·ª±c ngu·ªìn g·ªëc (Issuer) c·ªßa token. ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o token ƒë∆∞·ª£c ph√°t h√†nh b·ªüi m·ªôt ngu·ªìn ƒë√°ng tin c·∫≠y.
                ValidateAudience = true, // X√°c th·ª±c ng∆∞·ªùi nh·∫≠n (Audience) c·ªßa token. ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o token ch·ªâ d√†nh cho nh·ªØng ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ.
                ValidateLifetime = true, // X√°c th·ª±c th·ªùi gian s·ªëng c·ªßa token. Token s·∫Ω b·ªã t·ª´ ch·ªëi n·∫øu ƒë√£ h·∫øt h·∫°n.
                ValidateIssuerSigningKey = true, // X√°c th·ª±c ch·ªØ k√Ω c·ªßa token ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng token ch∆∞a b·ªã gi·∫£ m·∫°o.
                ValidAudience = JWTSetting["validAudience"], // 
                ValidIssuer = JWTSetting["validIssuer"], // 
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(JWTSetting.GetSection("securityKey").Value!)) // ƒê√¢y l√† kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c d√πng ƒë·ªÉ k√Ω token v√† ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn c·ªßa n√≥. Kh√≥a n√†y ƒë∆∞·ª£c t·∫°o b·∫±ng c√°ch s·ª≠ d·ª•ng SymmetricSecurityKey v·ªõi gi√° tr·ªã chu·ªói b·∫£o m·∫≠t (securityKey) ƒë∆∞·ª£c m√£ h√≥a d∆∞·ªõi d·∫°ng UTF-8
            };
        });


builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAllOrigins",
        builder =>
        {
            builder.AllowAnyOrigin()
                   .AllowAnyHeader()
                   .AllowAnyMethod();
            //.AllowCredentials();
        });
});

// Prevent DDoS attack (free) // [EnableRateLimitingAttribute("API")]
builder.Services.AddRateLimiter(options =>
{
    options.AddFixedWindowLimiter("API", limiter =>
    {
        //√ù nghƒ©a: Th·ªùi gian m·ªôt "c·ª≠a s·ªï" gi·ªõi h·∫°n(10 gi√¢y).
        //T√°c d·ª•ng:
        //  M·ªçi request s·∫Ω ƒë∆∞·ª£c t√≠nh trong kho·∫£ng th·ªùi gian 10 gi√¢y n√†y.
        //  Sau 10 gi√¢y, b·ªô ƒë·∫øm reset l·∫°i t·ª´ ƒë·∫ßu.
        //V√≠ d·ª•: N·∫øu c√≥ 100 requests trong 5 gi√¢y ƒë·∫ßu ‚Üí ph·∫£i ƒë·ª£i 5 gi√¢y n·ªØa ƒë·ªÉ c·ª≠a s·ªï reset.
        limiter.Window = TimeSpan.FromSeconds(10);  // (1) C·ª≠a s·ªï th·ªùi gian

        //√ù nghƒ©a: S·ªë request t·ªëi ƒëa cho ph√©p trong m·ªôt c·ª≠a s·ªï th·ªùi gian(Window).
        //T√°c d·ª•ng:
        //  N·∫øu v∆∞·ª£t qu√° 100 requests / 10 gi√¢y t·ª´ 1 client ‚Üí tr·∫£ v·ªÅ HTTP 429 Too Many Requests.
        //  Gi√∫p ngƒÉn flood request t·ª´ m·ªôt IP.
        //L∆∞u √Ω: N√™n ƒëi·ªÅu ch·ªânh theo l∆∞u l∆∞·ª£ng th·ª±c t·∫ø(API c√¥ng khai c·∫ßn gi√° tr·ªã cao h∆°n).
        limiter.PermitLimit = 100;                  // (2) S·ªë request t·ªëi ƒëa

        //√ù nghƒ©a: S·ªë request ƒë∆∞·ª£c ph√©p x·∫øp h√†ng ch·ªù khi ƒë·∫°t PermitLimit.
        //T√°c d·ª•ng:
        //  Khi ƒë·∫°t 100 requests, c√°c request ti·∫øp theo(t·ªëi ƒëa 10) s·∫Ω ƒë∆∞·ª£c x·∫øp h√†ng ch·ªù.
        //  N·∫øu h√†ng ƒë·ª£i ƒë·∫ßy ‚Üí tr·∫£ v·ªÅ 429 ngay l·∫≠p t·ª©c.
        //V√≠ d·ª•:
        //  Request 101 ‚Üí 110: X·∫øp h√†ng ch·ªù.
        //  Request 111 +: B·ªã t·ª´ ch·ªëi ngay.
        limiter.QueueLimit = 10;                    // (3) S·ªë request ƒë∆∞·ª£c x·∫øp h√†ng

        //limiter.QueueProcessingOrder = QueueProcessingOrder.OldestFirst;
    });

    // T√πy ch·ªçn: thay v√¨ tr·∫£ 503, tr·∫£ 429 Too Many Requests
    options.RejectionStatusCode = StatusCodes.Status429TooManyRequests;

    // (Optional) Log ho·∫∑c tr·∫£ th√¥ng ƒëi·ªáp custom khi b·ªã ch·∫∑n
    options.OnRejected = async (context, token) =>
    {
        // Ghi log khi b·ªã t·ª´ ch·ªëi
        logger.LogWarning("Rate limit exceeded from IP: {IP}, Path: {Path}",
            context.HttpContext.Connection.RemoteIpAddress,
            context.HttpContext.Request.Path);

        // Tr·∫£ v·ªÅ th√¥ng b√°o JSON
        context.HttpContext.Response.ContentType = "application/json";
        await context.HttpContext.Response.WriteAsync("{\"error\": \"Too many requests. Please try again later.\"}", token);
    };
});

builder.Services.Configure<RequestTimeoutOptions>(options =>
{
    //√ù nghƒ©a: Th·ªùi gian t·ªëi ƒëa m·ªôt request ƒë∆∞·ª£c ph√©p x·ª≠ l√Ω.
    //T√°c d·ª•ng:
    //  N·∫øu request ch·∫°y qu√° 30 gi√¢y ‚Üí t·ª± ƒë·ªông h·ªßy.
    //  NgƒÉn c√°c request "treo" do t·∫•n c√¥ng Slowloris(DDoS k√©o d√†i k·∫øt n·ªëi).
    //L∆∞u √Ω:
    //  V·ªõi API c√≥ x·ª≠ l√Ω ph·ª©c t·∫°p(upload file l·ªõn), c·∫ßn tƒÉng gi√° tr·ªã n√†y.
    //  C√≥ th·ªÉ √°p d·ª•ng ri√™ng cho t·ª´ng endpoint:
    options.AddPolicy("API", TimeSpan.FromSeconds(30)); // d√πng c√°ch n√†y th√¨ ph·∫£i g·∫Øn Attribute th·ªß c√¥ng  [RequestTimeout("API")]
});

//// Kestrel config cho test Slowloris
//builder.WebHost.ConfigureKestrel(options =>
//{
//    options.ListenAnyIP(5000); // Ho·∫∑c ch·ªâ ListenLocalhost n·∫øu c·∫ßn

//    // C√°c gi·ªõi h·∫°n x·ª≠ l√Ω connection
//    options.Limits.MaxConcurrentConnections = 10000; // Tu·ª≥ c·∫•u h√¨nh m√°y
//    options.Limits.MaxConcurrentUpgradedConnections = 10000;

//    // Th·ªùi gian ch·ªù header g·ª≠i ƒë·∫øn (Slowloris hay l·ª£i d·ª•ng c√°i n√†y)
//    options.Limits.RequestHeadersTimeout = TimeSpan.FromSeconds(300); // ƒê·∫∑t cao n·∫øu mu·ªën server "ch·ªãu tr·∫≠n"

//    // N·∫øu mu·ªën test server d·ªÖ s·∫≠p, set timeout c·ª±c cao
//    // N·∫øu mu·ªën th·∫•y server b·∫£o v·ªá t·ªët, gi·∫£m xu·ªëng th·∫•p (5s ho·∫∑c 10s)

//    // Keep-alive timeout: th·ªùi gian gi·ªØ connection n·∫øu client kh√¥ng g·ª≠i g√¨
//    options.Limits.KeepAliveTimeout = TimeSpan.FromSeconds(120);

//    // C·∫•u h√¨nh t·ªëi ƒëa body size n·∫øu mu·ªën ki·ªÉm th·ª≠ th√™m layer
//    options.Limits.MaxRequestBodySize = 10 * 1024 * 1024; // 10MB
//});


builder.Services.AddControllers();

// Config Logs  
Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(builder.Configuration)
    .Enrich.FromLogContext()
    .Enrich.WithMachineName()
    .WriteTo.Console(new Serilog.Formatting.Json.JsonFormatter())
    .WriteTo.File(new Serilog.Formatting.Json.JsonFormatter(), "RuntimeData/Logs/log.json", rollingInterval: RollingInterval.Day)
    .Filter.ByExcluding(logEvent =>
        logEvent.Properties.ContainsKey("SkipLogging") &&
        logEvent.Properties["SkipLogging"].ToString() == "True")
    .CreateLogger();

builder.Host.UseSerilog();


// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
//builder.Services.AddSwaggerGen(c =>
//{
//    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
//    {
//        Description = @"JWT Authorization Example: 'Bearer your_token_here",
//        Name = "Authorization",
//        In = ParameterLocation.Header,
//        Type = SecuritySchemeType.ApiKey,
//        Scheme = "Bearer"
//    });

//    c.AddSecurityRequirement(new OpenApiSecurityRequirement() {
//        {
//            new OpenApiSecurityScheme{
//                Reference = new OpenApiReference
//                {
//                    Type = ReferenceType.SecurityScheme ,
//                    Id = "Bearer"
//                },
//                Scheme = "outh2",
//                Name = "Bearer",
//                In = ParameterLocation.Header
//            },
//            new List<string>()
//        }
//    });
//});

//builder.Services.Configure<Microsoft.AspNetCore.Http.Json.JsonOptions>(options =>
//{ 
//    options.SerializerOptions.PropertyNamingPolicy = null;
//});

builder.Services.Configure<ApiBehaviorOptions>(o =>
{
    o.SuppressModelStateInvalidFilter = true;
});

builder.Services.AddControllers().AddJsonOptions(o =>
{
    o.JsonSerializerOptions.PropertyNamingPolicy = null;
});

// config signalR
builder.Services.AddSignalR();

var app = builder.Build();
app.UseRateLimiter(); // Prevent DDoS attack (free)
app.Use(async (context, next) =>
{
    var badIPs = new[] { "192.168.1.44" };
    if (badIPs.Contains(context.Connection.RemoteIpAddress?.ToString()))
    {
        context.Response.StatusCode = 403;
        return;
    }
    await next();
});

// Middleware b·∫£o m·∫≠t
app.Use(async (context, next) =>
{
    //M·ª•c ƒë√≠ch: Ch·ªëng clickjacking
    //T√°c d·ª•ng: NgƒÉn trang web c·ªßa b·∫°n b·ªã nh√∫ng trong<iframe>
    context.Response.Headers.Add("X-Frame-Options", "DENY");

    //M·ª•c ƒë√≠ch: Ch·ªëng MIME sniffing
    //T√°c d·ª•ng: Bu·ªôc tr√¨nh duy·ªát t√¥n tr·ªçng Content-Type
    //V√≠ d·ª• ph√≤ng ng·ª´a:
    //File upload .jpg nh∆∞ng th·ª±c ch·∫•t l√†.js ‚Üí Tr√¨nh duy·ªát s·∫Ω kh√¥ng th·ª±c thi n·∫øu header n√†y c√≥
    context.Response.Headers.Add("X-Content-Type-Options", "nosniff");

    //M·ª•c ƒë√≠ch: B·∫£o v·ªá th√¥ng tin ng∆∞·ªùi d√πng
    //T√°c d·ª•ng: Kh√¥ng g·ª≠i URL ngu·ªìn(referrer) khi chuy·ªÉn trang
    context.Response.Headers.Add("Referrer-Policy", "no-referrer");

    //CSP Header(Ch·ªëng XSS):
    context.Response.Headers.Add("Content-Security-Policy", "default-src 'self'; script-src 'self' 'unsafe-inline'");

    // HSTS Header (B·∫Øt bu·ªôc HTTPS):
    context.Response.Headers.Add("Strict-Transport-Security", "max-age=63072000; includeSubDomains; preload");

    await next();
});

app.UseMiddleware<GlobalExceptionHandlerMiddleware>();
app.UseMiddleware<UserEnricherMiddleware>();
app.UseSerilogRequestLogging(); // t·ª± ƒë·ªông log th√¥ng tin HTTP request

// Configure the HTTP request pipeline.
//if (app.Environment.IsDevelopment())
//{
//    // app.UseSwagger();
//    // app.UseSwaggerUI();
//}

app.UseMiddleware<LoggingMiddleware>();

// Note: N·∫øu nh∆∞ kh√¥ng d√πng SSL th√¨ disable feature n√†y ƒëi, n·∫øu kh√¥ng n√≥ s·∫Ω t·ª± ƒë·ªông chuy·ªÉn sang https n·∫øu client ƒëang call api d·∫°ng http
//B·∫≠t SSL: dotnet dev-certs https --trust
//app.UseHttpsRedirection();

app.UseCors("AllowAllOrigins");

app.UseAuthentication();

app.UseAuthorization();

app.MapControllers();

//app.MapPost("broadcast", async (string message, IHubContext<NotificationHub, INotificationClient> context) =>
//{
//    await context.Clients.All.ReceiveMessage(message);
//    return Results.NoContent();
//});

app.MapHub<ChatHub>("chat-hub");

// -----------Auto tracking port in production----------------------
if (app.Environment.IsProduction())
{
    var port = Environment.GetEnvironmentVariable("PORT") ?? "80";
    app.Urls.Add($"http://*:{port}");
}

using (var scope = app.Services.CreateScope())
{
    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    db.Database.Migrate();
}

app.Run();
