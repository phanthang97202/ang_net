using SharedModels.Models;
using API.SignalR;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Serilog;
using System.Text;
using StackExchange.Redis;
using TCommonUtils = CommonUtils.CommonUtils.CommonUtils;
using API.Application.Interfaces.Repositories;
using API.API.MIddlewares;
using API.Infrastructure.Data;
using API.Infrastructure.Data.Repositories;
using API.Application.Interfaces.Persistences;
using API.Infrastructure.Data.Services;
using API.Infrastructure.Data.UnitOfWork;
using API.Shared.Utilities;
using API.Application.Interfaces.Services;
using API.API.Models;
using API.API.Middlewares;

// Ch·ªó n√†y n√≥ t·ª± ƒë·ªông load appsettings.json v√† appsettings.{Environment}.json
var builder = WebApplication.CreateBuilder(args);

// =====================================
builder.Configuration
    .SetBasePath(Directory.GetCurrentDirectory())
    .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true) // üëà Cho ph√©p thi·∫øu
    .AddJsonFile($"appsettings.{builder.Environment.EnvironmentName}.json", optional: true)
    .AddEnvironmentVariables();


//builder.Services.AddDbContext<AppDbContext>(options =>
//    options.UseSqlite(builder.Configuration.GetConnectionString("SQLiteConnection")));

var JWTSetting = builder.Configuration.GetSection("JWTSetting");
var redisCloudEnv = builder.Configuration.GetSection("RedisCloud");
var database = builder.Configuration.GetSection("ConnectionStrings");
var clientConfig = builder.Configuration.GetSection("ClientConfig");
string RedisUrl = redisCloudEnv.GetSection("RedisUrl").Value;
int RedisPort = TCommonUtils.ConvertToInt(redisCloudEnv.GetSection("RedisPort").Value);
string RedisUser = (redisCloudEnv.GetSection("RedisUser").Value);
string RedisPassword = (redisCloudEnv.GetSection("RedisPassword").Value);

// Add services to the container.
builder.Services.AddScoped<IChatRepository, ChatRespository>();
builder.Services.AddScoped<INewsRespository, NewsRespository>();
builder.Services.AddScoped<IAccountRespository, AccountRespository>();
builder.Services.AddScoped<IHashTagNewsRespository, HashTagNewsRespository>();
builder.Services.AddScoped<INewsCategoryRespository, NewsCategoryRespository>();

// ============ Unit Of Work Pattern ============ 
//          +------------------------+
//          | Controller |  ‚¨ÖÔ∏è Inject Service
//          +------------------------+
//          			‚¨á
//          +------------------------+
//          |      Service Layer     |  ‚¨ÖÔ∏è Inject IUnitOfWork
//          +------------------------+
//          			‚¨á
//          +------------------------+
//          |    UnitOfWork Layer    |  ‚¨ÖÔ∏è Inject Repositories
//          | - NewsRepository       |
//          | - CategoryNewsRepo     |
//          | - SaveChangesAsync()   |
//          | - Dispose()           |
//          +------------------------+
//          			‚¨á
//          +------------------------+
//          |   Repository Layer     |  ‚¨ÖÔ∏è Inject AppDbContext
//          | - Ch·ªâ thao t√°c DB      |
//          | - Kh√¥ng g·ªçi SaveChanges|
//          +------------------------+
//          			‚¨á
//          +------------------------+
//          |       Database         |
//          +------------------------+
// d√πng AddScoped ƒë·ªÉ: 
//      ƒê·∫£m b·∫£o DbContext d√πng chung trong 1 request,
//      Tr√°nh xung ƒë·ªôt d·ªØ li·ªáu n·∫øu c√≥ nhi·ªÅu thao t√°c db trong c√πng 1 request,
//      Qu·∫£n l√Ω transaction d·ªÖ d√†ng khi g·ªçi SaveChangesAsync() trong 1 l·∫ßn duy nh·∫•t,
//      Hi·ªáu su·∫•t t·ªët
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();

builder.Services.AddScoped<IMstProvinceRespository, MstProvinceRespository>();
builder.Services.AddScoped<IMstProvinceService, MstProvinceService>();

builder.Services.AddScoped<IMstStadiumStatusRespository, MstStadiumStatusRespository>();
builder.Services.AddScoped<MstStadiumStatusService>();

builder.Services.AddScoped<IMstStadiumTypeRespository, MstStadiumTypeRespository>();
builder.Services.AddScoped<MstStadiumTypeService>();

builder.Services.AddScoped<IMstStadiumRespository, MstStadiumRespository>();
builder.Services.AddScoped<MstStadiumService>();

builder.Services.AddScoped<IMstDistrictRespository, MstDistrictRespository>();
builder.Services.AddScoped<MstDistrictService>();

// inject AppDbContext
// builder.Services.AddDbContext<AppDbContext>(options => options.UseSqlite(database["LocalDb"]));
//builder.Services.AddDbContext<AppDbContext>(options => options.UseNpgsql(database["PostgresqlDb"]));
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("PostgresqlDb")));
// inject Redis 
ConfigurationOptions configRedis = new ConfigurationOptions
{
    EndPoints = { { RedisUrl, RedisPort } },
    User = RedisUser,
    Password = RedisPassword
};
ConnectionMultiplexer connectRedis = ConnectionMultiplexer.Connect(configRedis);
builder.Services.AddSingleton<IConnectionMultiplexer>(sp => connectRedis); // t√πy ch·ªânh logic b√™n trong b·∫±ng lamda
// log service 
builder.Services.AddSingleton(typeof(WriteLog));

// config jwt 
builder.Services.AddIdentity<AppUser, IdentityRole>().AddEntityFrameworkStores<AppDbContext>()
.AddDefaultTokenProviders();

builder.Services.AddAuthentication(opt =>
{
    opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    opt.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(opt =>
{
    opt.SaveToken = true; // Thi·∫øt l·∫≠p ƒë·ªÉ l∆∞u l·∫°i token sau khi x√°c th·ª±c th√†nh c√¥ng. ƒêi·ªÅu n√†y h·ªØu √≠ch khi b·∫°n c·∫ßn truy c·∫≠p token trong su·ªët v√≤ng ƒë·ªùi c·ªßa y√™u c·∫ßu HTTP.
    opt.RequireHttpsMetadata = false; // ƒê·∫∑t gi√° tr·ªã n√†y th√†nh false ƒë·ªÉ ·ª©ng d·ª•ng kh√¥ng y√™u c·∫ßu s·ª≠ d·ª•ng HTTPS trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn (kh√¥ng n√™n s·ª≠ d·ª•ng trong s·∫£n xu·∫•t v√¨ thi·∫øu an to√†n). Khi true, ·ª©ng d·ª•ng s·∫Ω y√™u c·∫ßu HTTPS.
    opt.TokenValidationParameters = new TokenValidationParameters // ƒê√¢y l√† n∆°i thi·∫øt l·∫≠p c√°c tham s·ªë ƒë·ªÉ x√°c th·ª±c v√† h·ª£p l·ªá h√≥a token JWT.
    {
        ValidateIssuer = true, //  X√°c th·ª±c ngu·ªìn g·ªëc (Issuer) c·ªßa token. ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o token ƒë∆∞·ª£c ph√°t h√†nh b·ªüi m·ªôt ngu·ªìn ƒë√°ng tin c·∫≠y.
        ValidateAudience = true, // X√°c th·ª±c ng∆∞·ªùi nh·∫≠n (Audience) c·ªßa token. ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o token ch·ªâ d√†nh cho nh·ªØng ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ.
        ValidateLifetime = true, // X√°c th·ª±c th·ªùi gian s·ªëng c·ªßa token. Token s·∫Ω b·ªã t·ª´ ch·ªëi n·∫øu ƒë√£ h·∫øt h·∫°n.
        ValidateIssuerSigningKey = true, // X√°c th·ª±c ch·ªØ k√Ω c·ªßa token ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng token ch∆∞a b·ªã gi·∫£ m·∫°o.
        ValidAudience = JWTSetting["validAudience"], // 
        ValidIssuer = JWTSetting["validIssuer"], // 
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(JWTSetting.GetSection("securityKey").Value!)) // ƒê√¢y l√† kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c d√πng ƒë·ªÉ k√Ω token v√† ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn c·ªßa n√≥. Kh√≥a n√†y ƒë∆∞·ª£c t·∫°o b·∫±ng c√°ch s·ª≠ d·ª•ng SymmetricSecurityKey v·ªõi gi√° tr·ªã chu·ªói b·∫£o m·∫≠t (securityKey) ƒë∆∞·ª£c m√£ h√≥a d∆∞·ªõi d·∫°ng UTF-8
    };
});


builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAllOrigins",
        builder =>
        {
            builder.AllowAnyOrigin()
                   .AllowAnyHeader()
                   .AllowAnyMethod();
            //.AllowCredentials();
        });
});

builder.Services.AddControllers();


// Config Logs    
//Log.Logger = new LoggerConfiguration()
//    .Enrich.FromLogContext() // h√™m th√¥ng tin TraceId, UserId, v.v.\
//    .ReadFrom.Configuration(builder.Configuration)
//    .Enrich.WithMachineName()
//    .WriteTo.Console()
//    .WriteTo.File("RuntimeData/Logs/log.txt", rollingInterval: RollingInterval.Day)
//    .Filter.ByExcluding(logEvent =>
//        logEvent.Properties.ContainsKey("SkipLogging") &&
//        logEvent.Properties["SkipLogging"].ToString() == "True")
//    .CreateLogger();

Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(builder.Configuration)
    .Enrich.FromLogContext()
    .Enrich.WithMachineName()
    .WriteTo.Console(new Serilog.Formatting.Json.JsonFormatter())
    .WriteTo.File(new Serilog.Formatting.Json.JsonFormatter(), "RuntimeData/Logs/log.json", rollingInterval: RollingInterval.Day)
    .Filter.ByExcluding(logEvent =>
        logEvent.Properties.ContainsKey("SkipLogging") &&
        logEvent.Properties["SkipLogging"].ToString() == "True")
    .CreateLogger();


builder.Host.UseSerilog();


// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = @"JWT Authorization Example: 'Bearer your_token_here",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer"
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement() {
        {
            new OpenApiSecurityScheme{
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme ,
                    Id = "Bearer"
                },
                Scheme = "outh2",
                Name = "Bearer",
                In = ParameterLocation.Header
            },
            new List<string>()
        }
    });
});

//builder.Services.Configure<Microsoft.AspNetCore.Http.Json.JsonOptions>(options =>
//{ 
//    options.SerializerOptions.PropertyNamingPolicy = null;
//});

builder.Services.Configure<ApiBehaviorOptions>(o =>
{
    o.SuppressModelStateInvalidFilter = true;
});

builder.Services.AddControllers().AddJsonOptions(o =>
{
    o.JsonSerializerOptions.PropertyNamingPolicy = null;
});

// config signalR
builder.Services.AddSignalR();



var app = builder.Build();
app.UseMiddleware<GlobalExceptionHandlerMiddleware>();
app.UseMiddleware<UserEnricherMiddleware>();
app.UseSerilogRequestLogging(); // t·ª± ƒë·ªông log th√¥ng tin HTTP request

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    // app.UseSwagger();
    // app.UseSwaggerUI();
}

app.UseMiddleware<LoggingMiddleware>();


// Note: N·∫øu nh∆∞ kh√¥ng d√πng SSL th√¨ disable feature n√†y ƒëi, n·∫øu kh√¥ng n√≥ s·∫Ω t·ª± ƒë·ªông chuy·ªÉn sang https n·∫øu client ƒëang call api d·∫°ng http
//B·∫≠t SSL: dotnet dev-certs https --trust
//app.UseHttpsRedirection();

app.UseCors("AllowAllOrigins");


app.UseAuthentication();

app.UseAuthorization();

app.MapControllers();



//app.MapPost("broadcast", async (string message, IHubContext<NotificationHub, INotificationClient> context) =>
//{
//    await context.Clients.All.ReceiveMessage(message);
//    return Results.NoContent();
//});


app.MapHub<ChatHub>("chat-hub");

// -----------Auto tracking port in production----------------------
if (app.Environment.IsProduction())
{
    var port = Environment.GetEnvironmentVariable("PORT") ?? "80";
    app.Urls.Add($"http://*:{port}");
}


//using (var scope = app.Services.CreateScope())
//{
//    var services = scope.ServiceProvider;
//    var dbContext = services.GetRequiredService<AppDbContext>();
//    dbContext.Database.Migrate(); // T·ª± ƒë·ªông apply migration
//}

using (var scope = app.Services.CreateScope())
{
    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    db.Database.Migrate();
}



app.Run();
