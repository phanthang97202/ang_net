// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using angnet.Infrastructure.Data;

#nullable disable

namespace angnet.Infrastructure.Data.Persistences.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("angnet.Domain.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("angnet.Domain.Models.AuditTrailModel", b =>
                {
                    b.Property<int>("AuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditTrailId"));

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChangedColumns")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrailType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AuditTrailId");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("angnet.Domain.Models.ChatModel", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MessageId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("angnet.Domain.Models.GenerationAuthCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GenerationAuthCode");
                });

            modelBuilder.Entity("angnet.Domain.Models.HashTagNewsModel", b =>
                {
                    b.Property<string>("HashTagNewsId")
                        .HasColumnType("text");

                    b.Property<string>("NewsId")
                        .HasColumnType("text");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("HashTagNewsName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("HashTagNewsId", "NewsId");

                    b.HasIndex("NewsId");

                    b.ToTable("HashTagNews");
                });

            modelBuilder.Entity("angnet.Domain.Models.LikeNewsModel", b =>
                {
                    b.Property<string>("LikeNewsId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("NewsId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LikeNewsId");

                    b.HasIndex("NewsId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeNews");
                });

            modelBuilder.Entity("angnet.Domain.Models.MstDistrictModel", b =>
                {
                    b.Property<string>("DistrictCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DistrictCode");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("MstDistrict");
                });

            modelBuilder.Entity("angnet.Domain.Models.MstPaymentTypeModel", b =>
                {
                    b.Property<string>("PaymentTypeCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PaymentTypeCode");

                    b.ToTable("MstPaymentType");
                });

            modelBuilder.Entity("angnet.Domain.Models.MstProvinceModel", b =>
                {
                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProvinceCode");

                    b.ToTable("MstProvince");
                });

            modelBuilder.Entity("angnet.Domain.Models.MstStadiumFileModel", b =>
                {
                    b.Property<string>("StadiumFileId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StadiumCode")
                        .IsRequired()
                        .HasColumnType("character varying(250)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StadiumFileId");

                    b.HasIndex("StadiumCode");

                    b.ToTable("MstStadiumFileModel");
                });

            modelBuilder.Entity("angnet.Domain.Models.MstStadiumModel", b =>
                {
                    b.Property<string>("StadiumCode")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("FlagStadiumRent")
                        .HasColumnType("boolean");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StadiumAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StadiumDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StadiumName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("StadiumPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StadiumSalePercent")
                        .HasColumnType("numeric");

                    b.Property<string>("StadiumStatusCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StadiumTypeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StadiumCode");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("StadiumStatusCode");

                    b.HasIndex("StadiumTypeCode");

                    b.ToTable("MstStadium");
                });

            modelBuilder.Entity("angnet.Domain.Models.MstStadiumStatusModel", b =>
                {
                    b.Property<string>("StadiumStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StadiumStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StadiumStatusCode");

                    b.ToTable("MstStadiumStatus");
                });

            modelBuilder.Entity("angnet.Domain.Models.MstStadiumTypeModel", b =>
                {
                    b.Property<string>("StadiumTypeCode")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StadiumTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("StadiumTypeSalePercent")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StadiumTypeCode");

                    b.ToTable("MstStadiumType");
                });

            modelBuilder.Entity("angnet.Domain.Models.MstTenantContactModel", b =>
                {
                    b.Property<string>("TenantContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("TenantContactName")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TenantContactValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantContactId");

                    b.HasIndex("TenantId");

                    b.ToTable("MstTenantContact");
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsCategoryModel", b =>
                {
                    b.Property<string>("NewsCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean");

                    b.Property<int>("NewsCategoryIndex")
                        .HasColumnType("integer");

                    b.Property<string>("NewsCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NewsCategoryParentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NewsCategoryId");

                    b.ToTable("NewsCategory");
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsCommentMediaModel", b =>
                {
                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MediaId");

                    b.HasIndex("CommentId");

                    b.ToTable("NewsCommentMedia");
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsCommentModel", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("NewsId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("integer");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CommentId");

                    b.HasIndex("NewsId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsComment");
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsCommentReactionModel", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsCommentReaction");
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsModel", b =>
                {
                    b.Property<string>("NewsId")
                        .HasColumnType("text");

                    b.Property<double>("AvgPoint")
                        .HasColumnType("double precision");

                    b.Property<string>("CategoryNewsId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<int>("ShareCount")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.Property<string>("WhoCanSee")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("NewsId");

                    b.HasIndex("CategoryNewsId");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsReportCommentModel", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("text");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ReportId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsReportComment");
                });

            modelBuilder.Entity("angnet.Domain.Models.OrderStadiumModel", b =>
                {
                    b.Property<int>("OrderStadiumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderStadiumId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DebtMoney")
                        .HasColumnType("numeric");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OderDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderStadiumCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PaymentTypeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PreMoney")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RefundMoney")
                        .HasColumnType("numeric");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RentDTimeFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RentDTimeTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SalePercent")
                        .HasColumnType("numeric");

                    b.Property<string>("StadiumCode")
                        .IsRequired()
                        .HasColumnType("character varying(250)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("VAT")
                        .HasColumnType("numeric");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderStadiumId");

                    b.HasIndex("PaymentTypeCode");

                    b.HasIndex("StadiumCode");

                    b.HasIndex("UserId");

                    b.ToTable("OrderStadium");
                });

            modelBuilder.Entity("angnet.Domain.Models.OrderStadiumStatusLogModel", b =>
                {
                    b.Property<int>("OrderStadiumStatusLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderStadiumStatusLogId"));

                    b.Property<string>("ChangedData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderStadiumId")
                        .HasColumnType("integer");

                    b.Property<string>("PreviousStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderStadiumStatusLogId");

                    b.HasIndex("OrderStadiumId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderStadiumStatusLogModel");
                });

            modelBuilder.Entity("angnet.Domain.Models.PointNewsModel", b =>
                {
                    b.Property<string>("NewsId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Point")
                        .HasColumnType("double precision");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NewsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PointNews");
                });

            modelBuilder.Entity("angnet.Domain.Models.RefFileNewsModel", b =>
                {
                    b.Property<string>("RefFileNewsId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("NewsId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RefFileNewsId");

                    b.HasIndex("NewsId");

                    b.ToTable("RefFileNews");
                });

            modelBuilder.Entity("angnet.Domain.Models.RefreshTokenModel", b =>
                {
                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RefreshToken");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("angnet.Domain.Models.ShiftReportModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("HandoverAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ReceptionistName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShiftType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<decimal>("TotalCash")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalExpense")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalTransfer")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceptionistName");

                    b.HasIndex("ShiftDate");

                    b.ToTable("ShiftReport");
                });

            modelBuilder.Entity("angnet.Domain.Models.ShiftReportRoomSaleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RoomCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ShiftReportId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ShiftReportId");

                    b.ToTable("ShiftReportRoomSale");
                });

            modelBuilder.Entity("angnet.Domain.Models.ShiftReportTransactionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CashAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("ExpenseAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ExpenseDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PrepaidNote")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ShiftReportId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TransferAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ShiftReportId");

                    b.ToTable("ShiftReportTransaction");
                });

            modelBuilder.Entity("angnet.Domain.Models.TenantModel", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenantId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantAddress")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("TenantCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantDatabaseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantHost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantLogo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantPrefixHost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantStatus")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.HashTagNewsModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.NewsModel", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.LikeNewsModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.NewsModel", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.MstDistrictModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.MstProvinceModel", null)
                        .WithMany()
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.MstStadiumFileModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.MstStadiumModel", null)
                        .WithMany()
                        .HasForeignKey("StadiumCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.MstStadiumModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.MstDistrictModel", null)
                        .WithMany()
                        .HasForeignKey("DistrictCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.MstStadiumStatusModel", null)
                        .WithMany()
                        .HasForeignKey("StadiumStatusCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.MstStadiumTypeModel", null)
                        .WithMany()
                        .HasForeignKey("StadiumTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.MstTenantContactModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.TenantModel", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsCommentMediaModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.NewsCommentModel", null)
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsCommentModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.NewsModel", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.NewsCommentModel", null)
                        .WithMany()
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsCommentReactionModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.NewsCommentModel", null)
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.NewsCategoryModel", null)
                        .WithMany()
                        .HasForeignKey("CategoryNewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.NewsReportCommentModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.NewsCommentModel", null)
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.OrderStadiumModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.MstPaymentTypeModel", null)
                        .WithMany()
                        .HasForeignKey("PaymentTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.MstStadiumModel", null)
                        .WithMany()
                        .HasForeignKey("StadiumCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.OrderStadiumStatusLogModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.OrderStadiumModel", null)
                        .WithMany()
                        .HasForeignKey("OrderStadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.PointNewsModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.NewsModel", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.RefFileNewsModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.NewsModel", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.RefreshTokenModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("angnet.Domain.Models.ShiftReportRoomSaleModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.ShiftReportModel", "ShiftReport")
                        .WithMany("RoomSales")
                        .HasForeignKey("ShiftReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftReport");
                });

            modelBuilder.Entity("angnet.Domain.Models.ShiftReportTransactionModel", b =>
                {
                    b.HasOne("angnet.Domain.Models.ShiftReportModel", "ShiftReport")
                        .WithMany("Transactions")
                        .HasForeignKey("ShiftReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftReport");
                });

            modelBuilder.Entity("angnet.Domain.Models.ShiftReportModel", b =>
                {
                    b.Navigation("RoomSales");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
