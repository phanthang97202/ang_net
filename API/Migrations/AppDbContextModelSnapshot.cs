// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("API.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SharedModels.Models.ChatModel", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MessageId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("SharedModels.Models.HashTagNewsModel", b =>
                {
                    b.Property<string>("HashTagNewsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HashTagNewsName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("HashTagNewsId", "NewsId");

                    b.HasIndex("NewsId");

                    b.ToTable("HashTagNews");
                });

            modelBuilder.Entity("SharedModels.Models.LikeNewsModel", b =>
                {
                    b.Property<string>("LikeNewsId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LikeNewsId");

                    b.HasIndex("NewsId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeNews");
                });

            modelBuilder.Entity("SharedModels.Models.MstDistrictModel", b =>
                {
                    b.Property<string>("DistrictCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("DistrictCode");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("MstDistricts");
                });

            modelBuilder.Entity("SharedModels.Models.MstPaymentTypeModel", b =>
                {
                    b.Property<string>("PaymentTypeCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentTypeCode");

                    b.ToTable("MstPaymentTypes");
                });

            modelBuilder.Entity("SharedModels.Models.MstProvinceModel", b =>
                {
                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ProvinceCode");

                    b.ToTable("MstProvinces");
                });

            modelBuilder.Entity("SharedModels.Models.MstStadiumFileModel", b =>
                {
                    b.Property<string>("StadiumFileId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StadiumCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("StadiumFileId");

                    b.HasIndex("StadiumCode");

                    b.ToTable("MstStadiumFileModel");
                });

            modelBuilder.Entity("SharedModels.Models.MstStadiumModel", b =>
                {
                    b.Property<string>("StadiumCode")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FlagSale")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FlagStadiumRent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StadiumAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StadiumDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StadiumName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StadiumPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StadiumRentDTimeFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StadiumRentDTimeTo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StadiumSalePrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("StadiumStatusCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StadiumTypeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("StadiumCode");

                    b.HasIndex("DistrictCode");

                    b.HasIndex("StadiumStatusCode");

                    b.HasIndex("StadiumTypeCode");

                    b.ToTable("MstStadiums");
                });

            modelBuilder.Entity("SharedModels.Models.MstStadiumStatusModel", b =>
                {
                    b.Property<string>("StadiumStatusCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StadiumStatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("StadiumStatusCode");

                    b.ToTable("MstStadiumStatuses");
                });

            modelBuilder.Entity("SharedModels.Models.MstStadiumTypeModel", b =>
                {
                    b.Property<string>("StadiumTypeCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StadiumTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StadiumTypePrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("StadiumTypeQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StadiumTypeSale")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("StadiumTypeCode");

                    b.ToTable("MstStadiumTypes");
                });

            modelBuilder.Entity("SharedModels.Models.NewsCategoryModel", b =>
                {
                    b.Property<string>("NewsCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NewsCategoryIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewsCategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NewsCategoryParentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("NewsCategoryId");

                    b.ToTable("NewsCategory");
                });

            modelBuilder.Entity("SharedModels.Models.NewsModel", b =>
                {
                    b.Property<string>("NewsId")
                        .HasColumnType("TEXT");

                    b.Property<double>("AvgPoint")
                        .HasColumnType("REAL");

                    b.Property<string>("CategoryNewsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentBody")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LikeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShareCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("NewsId");

                    b.HasIndex("CategoryNewsId");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("SharedModels.Models.OrderStadiumModel", b =>
                {
                    b.Property<string>("OrderStadiumCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagFinish")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OderDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTypeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrePrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RentDTimeFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RentDTimeTo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Sale")
                        .HasColumnType("TEXT");

                    b.Property<string>("StadiumCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrderStadiumCode");

                    b.HasIndex("PaymentTypeCode");

                    b.HasIndex("StadiumCode");

                    b.HasIndex("UserId");

                    b.ToTable("OrderStadiums");
                });

            modelBuilder.Entity("SharedModels.Models.PointNewsModel", b =>
                {
                    b.Property<string>("NewsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Point")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("NewsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PointNews");
                });

            modelBuilder.Entity("SharedModels.Models.RefFileNewsModel", b =>
                {
                    b.Property<string>("RefFileNewsId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("FlagActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDTime")
                        .HasColumnType("TEXT");

                    b.HasKey("RefFileNewsId");

                    b.HasIndex("NewsId");

                    b.ToTable("RefFileNews");
                });

            modelBuilder.Entity("SharedModels.Models.RefreshTokenModel", b =>
                {
                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RefreshToken");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.HashTagNewsModel", b =>
                {
                    b.HasOne("SharedModels.Models.NewsModel", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.LikeNewsModel", b =>
                {
                    b.HasOne("SharedModels.Models.NewsModel", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.MstDistrictModel", b =>
                {
                    b.HasOne("SharedModels.Models.MstProvinceModel", null)
                        .WithMany()
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.MstStadiumFileModel", b =>
                {
                    b.HasOne("SharedModels.Models.MstStadiumModel", null)
                        .WithMany()
                        .HasForeignKey("StadiumCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.MstStadiumModel", b =>
                {
                    b.HasOne("SharedModels.Models.MstDistrictModel", null)
                        .WithMany()
                        .HasForeignKey("DistrictCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.Models.MstStadiumStatusModel", null)
                        .WithMany()
                        .HasForeignKey("StadiumStatusCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedModels.Models.MstStadiumTypeModel", null)
                        .WithMany()
                        .HasForeignKey("StadiumTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.NewsModel", b =>
                {
                    b.HasOne("SharedModels.Models.NewsCategoryModel", null)
                        .WithMany()
                        .HasForeignKey("CategoryNewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.OrderStadiumModel", b =>
                {
                    b.HasOne("SharedModels.Models.MstPaymentTypeModel", null)
                        .WithMany()
                        .HasForeignKey("PaymentTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedModels.Models.MstStadiumModel", null)
                        .WithMany()
                        .HasForeignKey("StadiumCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.PointNewsModel", b =>
                {
                    b.HasOne("SharedModels.Models.NewsModel", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.RefFileNewsModel", b =>
                {
                    b.HasOne("SharedModels.Models.NewsModel", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Models.RefreshTokenModel", b =>
                {
                    b.HasOne("API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
